"""schema audit (no-apply)

Revision ID: 0ee7de9d71f3
Revises: 6077053642c5
Create Date: 2025-10-29 18:29:13.929893

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0ee7de9d71f3'
down_revision: Union[str, Sequence[str], None] = '6077053642c5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('parties',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('party_type', sa.Enum('SUPPLIER', 'CUSTOMER', 'BOTH', name='partytype'), nullable=False),
    sa.Column('contact_person', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email', name='uq_parties_email'),
    sa.UniqueConstraint('name', name='uq_parties_name')
    )
    op.create_index(op.f('ix_parties_id'), 'parties', ['id'], unique=False)
    op.create_index('ix_parties_name', 'parties', ['name'], unique=False)
    op.create_index('ix_parties_type', 'parties', ['party_type'], unique=False)
    op.create_table('return_records',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('order_id', sa.String(), nullable=False, comment='关联的订单ID'),
    sa.Column('product_id', sa.String(), nullable=False, comment='退货产品ID'),
    sa.Column('quantity', sa.Integer(), nullable=False, comment='退货数量'),
    sa.Column('reason', sa.String(), nullable=True, comment='退货原因'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='记录创建时间(UTC)'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_return_records_id'), 'return_records', ['id'], unique=False)
    op.create_index('ix_return_records_order', 'return_records', ['order_id'], unique=False)
    op.create_index('ix_return_records_product', 'return_records', ['product_id'], unique=False)
    op.create_table('inventory_movements',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('item_sku', sa.String(), nullable=True),
    sa.Column('from_location_id', sa.String(), nullable=True),
    sa.Column('to_location_id', sa.String(), nullable=True),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('movement_type', sa.Enum('RECEIPT', 'SHIPMENT', 'TRANSFER', 'ADJUSTMENT', name='movementtype'), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['from_location_id'], ['locations.id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['item_sku'], ['items.sku'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['to_location_id'], ['locations.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventory_movements_id'), 'inventory_movements', ['id'], unique=False)
    op.create_index(op.f('ix_inventory_movements_item_sku'), 'inventory_movements', ['item_sku'], unique=False)
    op.create_index(op.f('ix_inventory_movements_movement_type'), 'inventory_movements', ['movement_type'], unique=False)
    op.create_index('ix_inventory_movements_sku_time', 'inventory_movements', ['item_sku', 'timestamp'], unique=False)
    op.create_index('ix_inventory_movements_type_time', 'inventory_movements', ['movement_type', 'timestamp'], unique=False)
    op.create_index(op.f('ix_batches_batch_code'), 'batches', ['batch_code'], unique=False)
    op.create_index('ix_batches_code', 'batches', ['batch_code'], unique=False)
    op.create_index('ix_batches_expiry', 'batches', ['expiry_date'], unique=False)
    op.create_index(op.f('ix_batches_expiry_date'), 'batches', ['expiry_date'], unique=False)
    op.create_index(op.f('ix_batches_item_id'), 'batches', ['item_id'], unique=False)
    op.create_index(op.f('ix_batches_location_id'), 'batches', ['location_id'], unique=False)
    op.create_index(op.f('ix_batches_warehouse_id'), 'batches', ['warehouse_id'], unique=False)
    op.create_index(op.f('ix_channel_inventory_item_id'), 'channel_inventory', ['item_id'], unique=False)
    op.create_index(op.f('ix_channel_inventory_store_id'), 'channel_inventory', ['store_id'], unique=False)
    op.create_index('ix_channel_inventory_store_item', 'channel_inventory', ['store_id', 'item_id'], unique=False)
    op.alter_column('event_error_log', 'shop_id',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)
    op.alter_column('event_error_log', 'error_code',
               existing_type=sa.VARCHAR(length=64),
               nullable=False)
    op.alter_column('event_error_log', 'error_msg',
               existing_type=sa.TEXT(),
               type_=sa.String(length=512),
               existing_nullable=True)
    op.alter_column('event_error_log', 'payload_json',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('event_error_log', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('event_error_log', 'payload')
    op.drop_column('event_error_log', 'error_type')
    op.drop_column('event_error_log', 'event_id')
    op.drop_column('event_error_log', 'message')
    op.create_index(op.f('ix_items_id'), 'items', ['id'], unique=False)
    op.create_index(op.f('ix_items_sku'), 'items', ['sku'], unique=True)
    op.drop_column('items', 'unit')
    op.create_index(op.f('ix_locations_warehouse_id'), 'locations', ['warehouse_id'], unique=False)
    op.create_index('ix_locations_wh', 'locations', ['warehouse_id'], unique=False)
    op.create_index(op.f('ix_order_items_item_id'), 'order_items', ['item_id'], unique=False)
    op.create_index(op.f('ix_order_items_order_id'), 'order_items', ['order_id'], unique=False)
    op.create_foreign_key(None, 'order_items', 'items', ['item_id'], ['id'], ondelete='RESTRICT')
    op.add_column('orders', sa.Column('order_no', sa.String(length=32), nullable=False))
    op.add_column('orders', sa.Column('order_type', sa.Enum('SALES', 'PURCHASE', name='order_type'), nullable=False))
    op.add_column('orders', sa.Column('status', sa.Enum('DRAFT', 'CONFIRMED', 'FULFILLED', 'CANCELED', name='order_status'), nullable=False))
    op.add_column('orders', sa.Column('customer_name', sa.String(length=255), nullable=True))
    op.add_column('orders', sa.Column('supplier_name', sa.String(length=255), nullable=True))
    op.add_column('orders', sa.Column('total_amount', sa.Numeric(precision=12, scale=2), nullable=False))
    op.add_column('orders', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.create_index(op.f('ix_orders_order_no'), 'orders', ['order_no'], unique=True)
    op.create_index(op.f('ix_orders_order_type'), 'orders', ['order_type'], unique=False)
    op.create_index(op.f('ix_orders_status'), 'orders', ['status'], unique=False)
    op.create_index('ix_orders_type_status', 'orders', ['order_type', 'status'], unique=False)
    op.alter_column('platform_shops', 'platform',
               existing_type=sa.VARCHAR(length=32),
               comment='平台类型，如 pdd/tb/jd',
               existing_nullable=False)
    op.alter_column('platform_shops', 'shop_id',
               existing_type=sa.VARCHAR(length=64),
               comment='平台店铺唯一 ID',
               existing_nullable=False)
    op.alter_column('platform_shops', 'token_expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='token 过期时间(UTC)',
               existing_nullable=True)
    op.alter_column('platform_shops', 'status',
               existing_type=sa.VARCHAR(length=16),
               comment='ACTIVE/PAUSED/REVOKED',
               existing_nullable=False,
               existing_server_default=sa.text("'ACTIVE'::character varying"))
    op.alter_column('platform_shops', 'rate_limit_qps',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='平台 API 限流QPS',
               existing_server_default=sa.text('5'))
    op.alter_column('platform_shops', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创建时间(UTC)',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('platform_shops', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='更新时间(UTC)',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('stock_ledger', 'reason',
               existing_type=sa.VARCHAR(length=32),
               type_=sa.String(length=64),
               existing_nullable=False,
               existing_server_default=sa.text("'ADJUST'::character varying"))
    op.alter_column('stock_ledger', 'ref',
               existing_type=sa.VARCHAR(length=64),
               type_=sa.String(length=128),
               nullable=False)
    op.create_index('uq_ledger_reason_ref_refline_stock', 'stock_ledger', ['reason', 'ref', 'ref_line', 'stock_id'], unique=True)
    op.add_column('stock_snapshots', sa.Column('batch_id', sa.Integer(), nullable=True))
    op.add_column('stock_snapshots', sa.Column('qty_allocated', sa.Integer(), server_default=sa.text('0'), nullable=False))
    op.add_column('stock_snapshots', sa.Column('expiry_date', sa.Date(), nullable=True))
    op.add_column('stock_snapshots', sa.Column('age_days', sa.Integer(), nullable=True))
    op.alter_column('stock_snapshots', 'warehouse_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('stock_snapshots', 'location_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.alter_column('stock_snapshots', 'item_id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
    op.drop_constraint(op.f('uq_stock_snapshot_grain'), 'stock_snapshots', type_='unique')
    op.create_unique_constraint('uq_stock_snapshot_grain', 'stock_snapshots', ['snapshot_date', 'warehouse_id', 'location_id', 'item_id', 'batch_id'])
    op.create_index(op.f('ix_stock_snapshots_batch_id'), 'stock_snapshots', ['batch_id'], unique=False)
    op.create_index(op.f('ix_stock_snapshots_item_id'), 'stock_snapshots', ['item_id'], unique=False)
    op.create_index(op.f('ix_stock_snapshots_location_id'), 'stock_snapshots', ['location_id'], unique=False)
    op.create_index(op.f('ix_stock_snapshots_snapshot_date'), 'stock_snapshots', ['snapshot_date'], unique=False)
    op.create_index(op.f('ix_stock_snapshots_warehouse_id'), 'stock_snapshots', ['warehouse_id'], unique=False)
    op.create_foreign_key(None, 'stock_snapshots', 'warehouses', ['warehouse_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(None, 'stock_snapshots', 'locations', ['location_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(None, 'stock_snapshots', 'items', ['item_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(None, 'stock_snapshots', 'batches', ['batch_id'], ['id'], ondelete='RESTRICT')
    op.drop_column('stock_snapshots', 'as_of_ts')
    op.drop_column('stock_snapshots', 'qty')
    op.drop_column('stock_snapshots', 'updated_at')
    op.create_index(op.f('ix_stocks_item_id'), 'stocks', ['item_id'], unique=False)
    op.create_index('ix_stocks_item_loc', 'stocks', ['item_id', 'location_id'], unique=False)
    op.create_index(op.f('ix_stocks_location_id'), 'stocks', ['location_id'], unique=False)
    op.create_unique_constraint('uq_stocks_item_loc', 'stocks', ['item_id', 'location_id'])
    op.create_foreign_key(None, 'stocks', 'locations', ['location_id'], ['id'], ondelete='RESTRICT')
    op.create_foreign_key(None, 'stocks', 'items', ['item_id'], ['id'], ondelete='RESTRICT')
    op.drop_column('stocks', 'batch_code')
    op.drop_column('stocks', 'warehouse_id')
    op.create_index(op.f('ix_store_items_item_id'), 'store_items', ['item_id'], unique=False)
    op.create_index(op.f('ix_store_items_store_id'), 'store_items', ['store_id'], unique=False)
    op.create_index('ix_store_items_store_item', 'store_items', ['store_id', 'item_id'], unique=False)
    op.create_index('ix_stores_platform_active', 'stores', ['platform', 'active'], unique=False)
    op.create_unique_constraint('uq_stores_platform_name', 'stores', ['platform', 'name'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('uq_stores_platform_name', 'stores', type_='unique')
    op.drop_index('ix_stores_platform_active', table_name='stores')
    op.drop_index('ix_store_items_store_item', table_name='store_items')
    op.drop_index(op.f('ix_store_items_store_id'), table_name='store_items')
    op.drop_index(op.f('ix_store_items_item_id'), table_name='store_items')
    op.add_column('stocks', sa.Column('warehouse_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('stocks', sa.Column('batch_code', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'stocks', type_='foreignkey')
    op.drop_constraint(None, 'stocks', type_='foreignkey')
    op.drop_constraint('uq_stocks_item_loc', 'stocks', type_='unique')
    op.drop_index(op.f('ix_stocks_location_id'), table_name='stocks')
    op.drop_index('ix_stocks_item_loc', table_name='stocks')
    op.drop_index(op.f('ix_stocks_item_id'), table_name='stocks')
    op.add_column('stock_snapshots', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('stock_snapshots', sa.Column('qty', sa.NUMERIC(precision=18, scale=4), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('stock_snapshots', sa.Column('as_of_ts', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'stock_snapshots', type_='foreignkey')
    op.drop_constraint(None, 'stock_snapshots', type_='foreignkey')
    op.drop_constraint(None, 'stock_snapshots', type_='foreignkey')
    op.drop_constraint(None, 'stock_snapshots', type_='foreignkey')
    op.drop_index(op.f('ix_stock_snapshots_warehouse_id'), table_name='stock_snapshots')
    op.drop_index(op.f('ix_stock_snapshots_snapshot_date'), table_name='stock_snapshots')
    op.drop_index(op.f('ix_stock_snapshots_location_id'), table_name='stock_snapshots')
    op.drop_index(op.f('ix_stock_snapshots_item_id'), table_name='stock_snapshots')
    op.drop_index(op.f('ix_stock_snapshots_batch_id'), table_name='stock_snapshots')
    op.drop_constraint('uq_stock_snapshot_grain', 'stock_snapshots', type_='unique')
    op.create_unique_constraint(op.f('uq_stock_snapshot_grain'), 'stock_snapshots', ['snapshot_date', 'warehouse_id', 'location_id', 'item_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('stock_snapshots', 'item_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('stock_snapshots', 'location_id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('stock_snapshots', 'warehouse_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('stock_snapshots', 'age_days')
    op.drop_column('stock_snapshots', 'expiry_date')
    op.drop_column('stock_snapshots', 'qty_allocated')
    op.drop_column('stock_snapshots', 'batch_id')
    op.drop_index('uq_ledger_reason_ref_refline_stock', table_name='stock_ledger')
    op.alter_column('stock_ledger', 'ref',
               existing_type=sa.String(length=128),
               type_=sa.VARCHAR(length=64),
               nullable=True)
    op.alter_column('stock_ledger', 'reason',
               existing_type=sa.String(length=64),
               type_=sa.VARCHAR(length=32),
               existing_nullable=False,
               existing_server_default=sa.text("'ADJUST'::character varying"))
    op.alter_column('platform_shops', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='更新时间(UTC)',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('platform_shops', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间(UTC)',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('platform_shops', 'rate_limit_qps',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='平台 API 限流QPS',
               existing_server_default=sa.text('5'))
    op.alter_column('platform_shops', 'status',
               existing_type=sa.VARCHAR(length=16),
               comment=None,
               existing_comment='ACTIVE/PAUSED/REVOKED',
               existing_nullable=False,
               existing_server_default=sa.text("'ACTIVE'::character varying"))
    op.alter_column('platform_shops', 'token_expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='token 过期时间(UTC)',
               existing_nullable=True)
    op.alter_column('platform_shops', 'shop_id',
               existing_type=sa.VARCHAR(length=64),
               comment=None,
               existing_comment='平台店铺唯一 ID',
               existing_nullable=False)
    op.alter_column('platform_shops', 'platform',
               existing_type=sa.VARCHAR(length=32),
               comment=None,
               existing_comment='平台类型，如 pdd/tb/jd',
               existing_nullable=False)
    op.drop_index('ix_orders_type_status', table_name='orders')
    op.drop_index(op.f('ix_orders_status'), table_name='orders')
    op.drop_index(op.f('ix_orders_order_type'), table_name='orders')
    op.drop_index(op.f('ix_orders_order_no'), table_name='orders')
    op.drop_column('orders', 'updated_at')
    op.drop_column('orders', 'total_amount')
    op.drop_column('orders', 'supplier_name')
    op.drop_column('orders', 'customer_name')
    op.drop_column('orders', 'status')
    op.drop_column('orders', 'order_type')
    op.drop_column('orders', 'order_no')
    op.drop_constraint(None, 'order_items', type_='foreignkey')
    op.drop_index(op.f('ix_order_items_order_id'), table_name='order_items')
    op.drop_index(op.f('ix_order_items_item_id'), table_name='order_items')
    op.drop_index('ix_locations_wh', table_name='locations')
    op.drop_index(op.f('ix_locations_warehouse_id'), table_name='locations')
    op.add_column('items', sa.Column('unit', sa.VARCHAR(length=8), server_default=sa.text("'PCS'::character varying"), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_items_sku'), table_name='items')
    op.drop_index(op.f('ix_items_id'), table_name='items')
    op.add_column('event_error_log', sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('event_error_log', sa.Column('event_id', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('event_error_log', sa.Column('error_type', sa.VARCHAR(length=64), autoincrement=False, nullable=False))
    op.add_column('event_error_log', sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.alter_column('event_error_log', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('event_error_log', 'payload_json',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('event_error_log', 'error_msg',
               existing_type=sa.String(length=512),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('event_error_log', 'error_code',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
    op.alter_column('event_error_log', 'shop_id',
               existing_type=sa.VARCHAR(length=64),
               nullable=True)
    op.drop_index('ix_channel_inventory_store_item', table_name='channel_inventory')
    op.drop_index(op.f('ix_channel_inventory_store_id'), table_name='channel_inventory')
    op.drop_index(op.f('ix_channel_inventory_item_id'), table_name='channel_inventory')
    op.drop_index(op.f('ix_batches_warehouse_id'), table_name='batches')
    op.drop_index(op.f('ix_batches_location_id'), table_name='batches')
    op.drop_index(op.f('ix_batches_item_id'), table_name='batches')
    op.drop_index(op.f('ix_batches_expiry_date'), table_name='batches')
    op.drop_index('ix_batches_expiry', table_name='batches')
    op.drop_index('ix_batches_code', table_name='batches')
    op.drop_index(op.f('ix_batches_batch_code'), table_name='batches')
    op.drop_index('ix_inventory_movements_type_time', table_name='inventory_movements')
    op.drop_index('ix_inventory_movements_sku_time', table_name='inventory_movements')
    op.drop_index(op.f('ix_inventory_movements_movement_type'), table_name='inventory_movements')
    op.drop_index(op.f('ix_inventory_movements_item_sku'), table_name='inventory_movements')
    op.drop_index(op.f('ix_inventory_movements_id'), table_name='inventory_movements')
    op.drop_table('inventory_movements')
    op.drop_index('ix_return_records_product', table_name='return_records')
    op.drop_index('ix_return_records_order', table_name='return_records')
    op.drop_index(op.f('ix_return_records_id'), table_name='return_records')
    op.drop_table('return_records')
    op.drop_index('ix_parties_type', table_name='parties')
    op.drop_index('ix_parties_name', table_name='parties')
    op.drop_index(op.f('ix_parties_id'), table_name='parties')
    op.drop_table('parties')
    # ### end Alembic commands ###
