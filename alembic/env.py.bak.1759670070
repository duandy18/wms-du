import os
import sys
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context

# 项目根目录入 sys.path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

# 读取 alembic.ini 配置
config = context.config
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# 只引入 Base，不引入任何需要 Settings 的模块
from app.db.base import Base  # noqa: E402

# 显式导入模型模块以注册到 Base.metadata（绝不 import app.db）
# from app.models import (  # noqa: E402,F401
    batch, inventory, item, locations, order, order_item, parties,
    permission, return_record, role, stock, user
)

target_metadata = Base.metadata

def run_migrations_offline():
    url = os.getenv("DATABASE_URL", "sqlite:///app/db/db.sqlite")
    context.configure(
        url=url, target_metadata=target_metadata, literal_binds=True, dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online():
    connectable = engine_from_config(
        {"sqlalchemy.url": os.getenv("DATABASE_URL", "sqlite:///app/db/db.sqlite")},
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata)
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
