name: app-ci

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

concurrency:
  group: app-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-type:
    name: lint-type
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          ruff check . && ruff format --check . && black --check . && isort --check-only .
          mypy .

  migrate-check:
    name: migrate-check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ github.event_name == 'push' || !github.event.pull_request.head.repo.fork }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.CI_POSTGRES_PASSWORD }}
          POSTGRES_DB: wms
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres -d wms"
          --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      PGHOST: 127.0.0.1
      PGPORT: "5432"
      PGUSER: postgres
      PGPASSWORD: ${{ secrets.CI_POSTGRES_PASSWORD }}
      PGDATABASE: wms
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          export DATABASE_URL="postgresql+psycopg://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
          alembic upgrade head

  tests:
    name: tests (matrix)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event_name == 'push' || !github.event.pull_request.head.repo.fork }}
    strategy:
      matrix:
        db: [sqlite, mysql]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.CI_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: wms
          MYSQL_USER: wms
          MYSQL_PASSWORD: ${{ secrets.CI_MYSQL_PASSWORD }}
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -p$$MYSQL_ROOT_PASSWORD --silent"
          --health-interval=10s --health-timeout=5s --health-retries=20
    env:
      SQLITE_URL: sqlite:///test.db
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: "3306"
      MYSQL_USER: wms
      MYSQL_PASSWORD: ${{ secrets.CI_MYSQL_PASSWORD }}
      MYSQL_DB: wms
      SEED_PROFILE: minimal
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install psycopg2-binary PyMySQL
      - name: Prepare DB (alembic + seed)
        run: |
          if [ "${{ matrix.db }}" = "mysql" ]; then
            export DATABASE_URL="mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DB}?charset=utf8mb4";
          else
            export DATABASE_URL="${{ env.SQLITE_URL }}";
          fi
          alembic upgrade head
          python -m scripts.seed_rbac || true
      - name: Run tests
        env:
          ENABLE_DIAG: "1"
        run: |
          pytest -q --maxfail=1 --disable-warnings

  coverage-gate:
    name: coverage-gate
    needs: [tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Coverage
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install psycopg2-binary PyMySQL
          export DATABASE_URL="${{ env.SQLITE_URL:-sqlite:///test.db }}"
          alembic upgrade head
          python -m scripts.seed_rbac || true
          pytest --cov=app --cov-report=term-missing --cov-fail-under=65
