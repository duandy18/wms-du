name: app-ci

on:
  push:
    branches: [dev, main]
  pull_request:
  
  workflow_dispatch:

concurrency:
  group: app-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-type:
    name: lint-type
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          ruff . && ruff format --check . && black --check . && isort --check-only .
          mypy .

  migrate-check:
    name: migrate-check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.CI_POSTGRES_PASSWORD }}
          POSTGRES_DB: wms
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres -d wms"
          --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      PGHOST: localhost
      PGPORT: "5432"
      PGUSER: postgres
      PGPASSWORD: ${{ secrets.CI_POSTGRES_PASSWORD }}
      PGDATABASE: wms
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          export DATABASE_URL="postgresql+psycopg://${PGUSER}:${PGPASSWORD}@${PGHOST}:${PGPORT}/${PGDATABASE}"
          # 迁移必须成功, 不再 || true
          alembic upgrade head

  tests:
    name: tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        db: [sqlite, mysql]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.CI_MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: wms
          MYSQL_USER: wms
          MYSQL_PASSWORD: ${{ secrets.CI_MYSQL_PASSWORD }}
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -p${{ secrets.CI_MYSQL_ROOT_PASSWORD }} --silent"
          --health-interval=10s --health-timeout=5s --health-retries=20
    env:
      SQLITE_URL: sqlite:///test.db
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: "3306"
      MYSQL_USER: wms
      MYSQL_PASSWORD: ${{ secrets.CI_MYSQL_PASSWORD }}
      MYSQL_DB: wms
      SEED_PROFILE: minimal
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: |
        # 如需更快, 可按需精简 matrix 或改为只测 sqlite
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ "${{ matrix.db }}" = "mysql" ]; then
            export DATABASE_URL="mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DB}?charset=utf8mb4";
          else
            export DATABASE_URL="${{ env.SQLITE_URL }}";
          fi
          pytest -q --maxfail=1 --disable-warnings

  coverage-gate:
    name: coverage-gate
    needs: [tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # 生成 coverage.xml + 70% 总体闸门
          pytest --cov=app --cov-report=term-missing --cov-report=xml:coverage.xml \
                 --cov-fail-under=70 -q --maxfail=1 --disable-warnings
      - name: diff-cover gate (PR only, 85%)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          pip install diff-cover
          git fetch origin main
          diff-cover coverage.xml --compare-branch=origin/main --fail-under=85

  # 可选 build（若你有构建流程, 在此实现; 暂时放一个占位步骤）
  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - run: echo "build step placeholder"

  # 汇总 Job: 只要它绿, 就说明所有子项都过了
  all-checks:
    name: all-checks
    runs-on: ubuntu-latest
    needs: [lint-type, migrate-check, tests, coverage-gate, build]
    steps:
      - run: echo "All checks passed ✅"
